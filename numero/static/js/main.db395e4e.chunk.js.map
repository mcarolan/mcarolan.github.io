{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NumberInput","props","disabled","class","onClick","value","PlayerControls","playerButtonsDisabled","onReplay","onSlowReplay","VerticalProgressBar","ratio","currentValue","maxValue","currentRed","colourProgess","Math","floor","currentGreen","progress","styleProps","useSpring","height","backgroundColor","from","className","div","style","Guess","currentGuess","this","toString","answer","maxPossibleCorrectPart","min","length","part","i","charAt","startsWith","reachedIncorrectPart","correctPartClass","correctPart","incorrectPart","React","Component","Game","useState","setCurrentGuess","nextAnswer","setAnswer","setDisabled","correctGuessCount","setCorrectGuessCount","remainingTime","setRemainingTime","countdownEnabled","setCountdownEnabled","random","nextQuestion","playAudio","s","speed","a","Audio","playbackRate","play","addEventListener","playAnswer","slow","renderNumberInput","handleNumberInput","useEffect","setTimeout","bind","timer","setInterval","clearInterval","colourProgress","App","started","setStarted","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db395e4e.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport {useSpring, animated} from 'react-spring'\nimport './App.css';\n\nfunction NumberInput(props) {\n  return (\n    <button disabled={props.disabled} class=\"btn\" onClick={() => props.onClick()}>{props.value}</button>\n  );\n}\n\nfunction PlayerControls(props) {\n  return (\n    <div class=\"playerControlContainer\">\n      <button class=\"playerButton thinkingBackground\" disabled={props.playerButtonsDisabled} onClick={() => props.onReplay()}>&nbsp;</button>\n      <button class=\"playerButton turtleBackground\" disabled={props.playerButtonsDisabled} onClick={() => props.onSlowReplay()}>&nbsp;</button>\n    </div>\n  );\n}\n\nfunction VerticalProgressBar(props) {\n  // from #009900 to #990000\n  const ratio = props.currentValue / props.maxValue;\n  const currentRed = props.colourProgess ? Math.floor(255 - (153 * ratio)) : 0;\n  const currentGreen = props.colourProgess ? Math.floor(153 * ratio) : 153;\n\n  const progress = ratio * 100;\n  const styleProps = useSpring({ height: `${progress}%`, backgroundColor: `rgb(${currentRed}, ${currentGreen}, 0)`, from: { height: `0%`, backgroundColor: `rgb(0, 153, 0)` }});\n  return (\n    <div className={props.className}>\n            <animated.div style={styleProps} className=\"progress\">\n              &nbsp;\n            </animated.div>\n    </div> \n  );\n}\n\nclass Guess extends React.Component {\n  correctPart() {\n    let currentGuess = this.props.currentGuess.toString();\n    let answer = this.props.answer.toString();\n\n    let maxPossibleCorrectPart = Math.min(currentGuess.length, answer.length);\n\n    let part = \"\";\n    for (var i = 0; i < maxPossibleCorrectPart; ++i) {\n      if (currentGuess.charAt(i) == answer.charAt(i)) {\n        part += currentGuess.charAt(i);\n      }\n      else {\n        break;\n      }\n    }\n\n    return part;\n  }\n\n  correctPartClass() {\n    let currentGuess = this.props.currentGuess.toString();\n    let answer = this.props.answer.toString();\n\n    return (currentGuess != \"\" && answer != \"\" && currentGuess == answer) ? \"guessCorrectComplete\" : \"guessCorrectIncomplete\";\n  }\n\n  incorrectPart() {\n    let currentGuess = this.props.currentGuess.toString();\n    let answer = this.props.answer.toString();\n\n    if (currentGuess == \"\" || answer == \"\") {\n      return \"\";\n    }\n    else if (answer.startsWith(currentGuess)) {\n      return \"\";\n    }\n    else {\n      let part = \"\";\n      let reachedIncorrectPart = false;\n      for (var i = 0; i < answer.length; ++i) {\n        if (!reachedIncorrectPart && currentGuess.charAt(i) == answer.charAt(i)) {\n          continue;\n        }\n        else {\n          reachedIncorrectPart = true;\n          part += answer.charAt(i);\n        }\n      }\n\n      return part;\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"guessBar\">\n        <span className={this.correctPartClass()}>{this.correctPart()}</span>\n        <span className=\"guessIncorrect\">{this.incorrectPart()}</span>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  const [started, setStarted] = React.useState(false);\n\n  if (started) {\n    return (\n      <Game />\n    );\n  }\n  else {\n    return (\n      <button class=\"btn\" onClick={() => setStarted(true)}>Start</button>\n    )\n  }\n}\n\nfunction Game() {\n\n  const [currentGuess, setCurrentGuess] = React.useState(\"\");\n  const [answer, setAnswer] = React.useState(nextAnswer());\n  const [disabled, setDisabled] = React.useState(true);\n  const [correctGuessCount, setCorrectGuessCount] = React.useState(0);\n  const [remainingTime, setRemainingTime] = React.useState(10);\n  const [countdownEnabled, setCountdownEnabled] = React.useState(true);\n\n  function nextAnswer() {\n    return Math.floor(Math.random() * 958).toString();\n  }\n\n  function nextQuestion() {\n    setCurrentGuess(\"\");\n    setAnswer(nextAnswer());\n    setRemainingTime(10);\n    setCountdownEnabled(true);\n  }\n\n  React.useEffect(() => {\n    if (currentGuess == \"\" || answer == \"\") return;\n\n    if (currentGuess == answer) {\n      setCountdownEnabled(false);\n      setCorrectGuessCount(correctGuessCount + 1);\n      playAudio(\"audio/correct.mp3\");\n      setTimeout(function() { nextQuestion() }.bind(this), 2000);\n    }\n    else if (answer.startsWith(currentGuess)) {\n      playAudio(\"audio/press.mp3\");\n    }\n    else {\n      setCountdownEnabled(false);\n      if (correctGuessCount > 0) {\n        setCorrectGuessCount(correctGuessCount - 1);\n      }\n      playAudio(\"audio/incorrect.mp3\");\n      setTimeout(function() { nextQuestion() }.bind(this), 2000);\n    }\n  }, [currentGuess, answer]);\n\n  React.useEffect(() => {\n    playAnswer(false);\n  }, [answer]);\n\n  React.useEffect(() => {\n    if (!countdownEnabled) {\n      return;\n    }\n    if (remainingTime == 0) {\n      setCurrentGuess(\"-\");\n    }\n    else {\n      const timer = remainingTime > 0 && setInterval(() => setRemainingTime(remainingTime - 1), 1000);\n      return () => clearInterval(timer);\n    }\n  }, [remainingTime, countdownEnabled])\n\n  function playAudio(s, speed) {\n    setDisabled(true);\n    let a = new Audio(s);\n    if (speed)\n      a.playbackRate = speed;\n    a.play();\n    a.addEventListener(\"ended\", () => setDisabled(false));\n  }\n\n  function playAnswer(slow) {\n    let rate = slow ? 0.6 : 1;\n    playAudio(\"audio/\" + answer + \".mp3\", rate);\n  }\n\n  function handleNumberInput(i) {\n    setDisabled(true);\n    let guess = currentGuess + i;\n    setCurrentGuess(guess);\n  }\n\n  function renderNumberInput(i) {\n    return (\n      <NumberInput disabled={disabled} value={i} onClick={() => handleNumberInput(i)} />\n    );\n  }\n\n    return (\n      <div class=\"grid-container\">\n        <div class=\"timeRemaining\"><VerticalProgressBar currentValue={remainingTime} maxValue=\"10\" className=\"timeBar\" colourProgess=\"true\" /></div>\n        <div class=\"correctGuesses\"><VerticalProgressBar currentValue={correctGuessCount} maxValue=\"10\" className=\"correctGuessBar\" colourProgress=\"false\" /></div>\n        <div class=\"playerControls\"><PlayerControls playerButtonsDisabled={disabled} onReplay={() => playAnswer(false)} onSlowReplay={() => playAnswer(true)} /></div>\n        <div class=\"guessInput\"><Guess currentGuess={currentGuess} answer={answer} /></div>\n        <div class=\"numberInputs\">\n          <div class=\"input1\">{renderNumberInput(1)}</div>\n          <div class=\"input2\">{renderNumberInput(2)}</div>\n          <div class=\"input3\">{renderNumberInput(3)}</div>\n          <div class=\"input4\">{renderNumberInput(4)}</div>\n          <div class=\"input5\">{renderNumberInput(5)}</div>\n          <div class=\"input6\">{renderNumberInput(6)}</div>\n          <div class=\"input7\">{renderNumberInput(7)}</div>\n          <div class=\"input8\">{renderNumberInput(8)}</div>\n          <div class=\"input9\">{renderNumberInput(9)}</div>\n          <div class=\"input0\">{renderNumberInput(0)}</div>\n        </div>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}